#include<stdio.h>
#include<conio.h>
#include<Windows.h>
//////////////////////////////////////////////////////
#define col GetStdHandle(STD_OUTPUT_HANDLE) 
#define BLACK SetConsoleTextAttribute( col,0x0000 );
#define DARK_BLUE SetConsoleTextAttribute( col,0x0001 );
#define GREEN SetConsoleTextAttribute( col,0x0002 );
#define BLUE_GREEN SetConsoleTextAttribute( col,0x0003 );
#define BLOOD SetConsoleTextAttribute( col,0x0004 );
#define PUPPLE SetConsoleTextAttribute( col,0x0005 );
#define GOLD SetConsoleTextAttribute( col,0x0006 );			//색상 지정
#define ORIGINAL SetConsoleTextAttribute( col,0x0007 );
#define GRAY SetConsoleTextAttribute( col,0x0008 );
#define BLUE SetConsoleTextAttribute( col,0x0009 );
#define HIGH_GREEN SetConsoleTextAttribute( col,0x000a );
#define SKY_BLUE SetConsoleTextAttribute( col,0x000b );
#define RED SetConsoleTextAttribute( col,0x000c );
#define PLUM SetConsoleTextAttribute( col,0x000d );
#define YELLOW SetConsoleTextAttribute( col,0x000e );
//////////////////////////////////////////////////////
#define WALL 1
#define NULL 0
#define Y 0
#define X 1
#define CHARACTER 2
#define RETURNPOINT 3
#define POTAL_MAX 7 //포탈 갯수
#define LEFT 75
#define RIGHT 77
#define UP 72
#define DOWN 80
#define SPACEBAR 32
#define WIDTH 15
#define HEIGHT 20
#define ENTRY_POTAL 10
#define EXIT_POTAL 20
#define ENTRY_START 10
#define EXIT_START 20
#define GOAL 30
#define DOOR 50
#define DOOR_START 50
#define KEY 40
#define KEY_START 40
#define DOOR_KEY_MAX 5
#define s 115


int map[HEIGHT][WIDTH] = {
	{ 1,	1,	1,	1,	1,	1,	1,	1,	1,	1 , 1, 1, 1, 1, 1 },
	{ 1,	21,	1,	41,	1,	0,	0,	0,	26,	1 , 0, 13 ,1, 30, 1 },
	{ 1,	0,	1,	0,	1,	0,	1,	0,	0,	1 , 0, 0 ,1, 53, 1 },
	{ 1,	0,	1,	0,	1,	0,	1,	0,	0,	1 , 0, 0, 1, 54, 1 },
	{ 1,	0,	0,	0,	1,	0,	1,	0,	0,	1 , 52, 1 ,1, 0, 1 },
	{ 1,	0,	1,	0,	1,	0,	1,	0,	0,	0 , 0, 0 ,1, 0, 1 },
	{ 1,	0,	1,	0,	1,	0,	1,	0,	0,	0 , 0, 0 ,1, 0, 1 },
	{ 1,	0,	1,	14,	1,	0,	1,	0,	0,	0 , 0, 0 ,1, 23, 1 },
	{ 1,	50,	1,	1,	1,	0,	1,	0,	0,	0 , 0, 0 ,1, 1, 1 },
	{ 1,	12,	1,	22,	1,	0,	1,	0,	0,	0 , 0, 0 ,1, 0, 1 },
	{ 1,	1,	1,	0,	1,	0,	1,	0,	0,	0 , 0, 0 ,1, 0, 1 },
	{ 1,	10,	1,	0,	1,	0,	1,	0,	0,	0 , 0, 0 ,1, 0, 1 },
	{ 1,	0,	1,	0,	1,	0,	1,	0,	1,	1,  1, 1 ,1, 0, 1 },
	{ 1,	0,	1,	0,	1,	0,	1,	0,	1,	0 , 0, 16 ,1, 0, 1 },
	{ 1,	0,	1,	0,	1,	0,	1,	0,	1,	0 , 0, 0 ,1, 0, 1 },
	{ 1,	0,	1,	0,	44,	0,	1,	43,	1,	25 , 1, 1 ,1, 1, 1 },
	{ 1,	0,	1,	51,	1,	1,	1,	1,	1,	1 , 1, 0 ,0, 20, 1 },
	{ 1,	2,	1,	0,	0,	0,	0,	0,	42,	1 , 40, 0 ,0, 0, 1 },
	{ 1,	3,	1,	0,	0,	0,	0,	0,	15,	1 , 11, 0 ,0, 24, 1 },
	{ 1,	1,	1,	1,	1,	1,	1,	1,	1,	1 , 1, 1, 1, 1, 1 } };

int character[2];
int Entry_Potal[POTAL_MAX][2];
int Exit_Potal[POTAL_MAX][2];
int Door[DOOR_KEY_MAX][2];
int Key[DOOR_KEY_MAX][2];
int Goal[2];
int LastObjectIndex = NULL;
int End = 0;
int ReturnPoint[2];



void Init()
{
	int Width = (WIDTH * 2) + 1;
	int Height = HEIGHT + 1;
	char buf[1024];
	sprintf(buf, "mode con : lines = %d", Height, Width);
	system(buf);

	for (int y = 0; y < HEIGHT; y++)
	{
		for (int x = 0; x < WIDTH; x++)
		{
			if (map[y][x] == CHARACTER)
			{
				character[X] = x;
				character[Y] = y;
			}
			else if (map[y][x] >= ENTRY_POTAL && map[y][x] < ENTRY_START + POTAL_MAX)
			{
				Entry_Potal[map[y][x] - ENTRY_START][X] = x;
				Entry_Potal[map[y][x] - ENTRY_START][Y] = y;
			}
			else if (map[y][x] >= EXIT_POTAL && map[y][x] < EXIT_START + POTAL_MAX)
			{
				Exit_Potal[map[y][x] - EXIT_START][X] = x;
				Exit_Potal[map[y][x] - EXIT_START][Y] = y;
			}
			else if (map[y][x] >= DOOR && map[y][x] < DOOR_START + DOOR_KEY_MAX)
			{
				Door[map[y][x] - DOOR_START][X] = x;
				Door[map[y][x] - DOOR_START][Y] = y;
			}
			else if (map[y][x] >= KEY && map[y][x] < KEY_START + DOOR_KEY_MAX)
			{
				Key[map[y][x] - KEY_START][X] = x;
				Key[map[y][x] - KEY_START][Y] = y;
			}
			else if (map[y][x] == GOAL)
			{
				Goal[X] = x;
				Goal[Y] = y;
			}
			else if (map[y][x] == RETURNPOINT)
			{
				ReturnPoint[X] = x;
				ReturnPoint[Y] = y;
			}
		}
	}
}

void MapDraw()
{
	for (int y = 0; y < HEIGHT; y++)
	{
		for (int x = 0; x < WIDTH; x++)
		{
			if (map[y][x] == WALL)
				printf("▩");
			else if (map[y][x] == CHARACTER)
			{
				RED
					printf("♧");
				ORIGINAL
			}
			else if (map[y][x] >= ENTRY_POTAL && map[y][x] < ENTRY_START + POTAL_MAX)
			{
				BLUE
					printf("◎");
				ORIGINAL
			}
			else if (map[y][x] >= EXIT_POTAL && map[y][x] < EXIT_START + POTAL_MAX)
			{
				YELLOW
					printf("●");
				ORIGINAL
			}
			else if (map[y][x] == GOAL)
			{
				HIGH_GREEN
					printf("★");
				ORIGINAL
			}
			else if (map[y][x] >= DOOR && map[y][x] < DOOR_START + DOOR_KEY_MAX)
			{
				SKY_BLUE
					printf("▣");
				ORIGINAL
			}
			else if (map[y][x] >= KEY && map[y][x] < KEY_START + DOOR_KEY_MAX)
			{
				PLUM
					printf("☞");
				ORIGINAL
			}
			else if (map[y][x] == NULL)
				printf("  ");
			else if (map[y][x] == RETURNPOINT)
			{
				GOLD
					printf("☆");
				ORIGINAL
			}
		}
		printf("\n");
	}

	printf("출구:");
	HIGH_GREEN
		printf("★");
	ORIGINAL
		printf("캐릭터:");
	RED
		printf("♧");
	ORIGINAL
		printf("포탈입장:");
	BLUE
		printf("◎");
	ORIGINAL
		printf("포탈출구:");
	YELLOW
		printf("●");
	ORIGINAL
		printf("열쇠:");
	PLUM
		printf("☞");
	ORIGINAL
		printf("문:");
	SKY_BLUE
		printf("▣\n");
	ORIGINAL
		printf("귀환지점");
	GOLD
		printf("☆\n");
	ORIGINAL
		printf("조작법: 방향키로 캐릭터이동\n");
	printf("스페이스바입력시일시정지\n");
	printf("s키 입력시 귀환지점으로 이동");

}

void MoveCheck()
{
	int index = map[character[Y]][character[X]];
	if (index >= ENTRY_START && index < ENTRY_START + POTAL_MAX)
	{
		character[X] = Exit_Potal[index - ENTRY_START][X];
		character[Y] = Exit_Potal[index - ENTRY_START][Y];
	}
}

void Quiz()
{
	int ANSWER;
	int index = map[character[Y]][character[X]];
	if (index >= KEY_START && index < KEY_START + DOOR_KEY_MAX)
	{
		while (1)
		{
			ANSWER = 0;
			if (index == KEY_START)
			{
				system("cls");
				printf("문제1번\n");
				printf("15+16=?");
				scanf("%d", &ANSWER);

				if (ANSWER != 31)
				{
					printf("오답입니다 다시입력하세요\n");
					getch();
					continue;
				}
				else break;
			}
			else if (index == KEY_START + 1)
			{

				printf("문제2번\n");
				printf("41+96=?");
				scanf("%d", &ANSWER);
				if (ANSWER != 137)
				{
					printf("오답입니다 다시입력하세요\n");
					getch();
					continue;
				}
				else break;
			}
			else  if (index == KEY_START + 2)
			{

				printf("문제3번\n");
				printf("8*9=?");
				scanf("%d", &ANSWER);
				if (ANSWER != 72)
				{
					printf("오답입니다 다시입력하세요\n");
					getch();
					continue;
				}
				else break;

			}
			else	if (index == KEY_START + 3)
			{

				printf("문제4번\n");
				printf("12*12=?");
				scanf("%d", &ANSWER);

				if (ANSWER != 144)
				{
					printf("오답입니다 다시입력하세요\n");
					getch();
					continue;
				}
				else break;

			}
			if (index == KEY_START + 4)
			{
				printf("문제5번\n");
				printf("15/3=?");
				scanf("%d", &ANSWER);
				if (ANSWER != 5)
				{
					printf("오답입니다 다시입력하세요\n");
					getch();
					continue;
				}
				else break;

			}

		}

		map[Key[index - KEY_START][Y]][Key[index - KEY_START][X]] = NULL;
		map[Door[index - KEY_START][Y]][Door[index - KEY_START][X]] = NULL;
	}
}

void Finish()
{

	if (map[character[Y]][character[X]] == GOAL)
	{
		system("cls");
		printf("========미궁탈출성공!========\a\a");
		getch();
		End = 99;
		system("cls");

	}
}

void Reset()
{
	for (int i = 0; i < DOOR_KEY_MAX; i++)
	{
		map[Door[i][Y]][Door[i][X]] = i + DOOR_START;
		map[Key[i][Y]][Key[i][X]] = i + KEY_START;
	}
	character[X] = ReturnPoint[X];
	character[Y] = ReturnPoint[Y];
}

void Move()
{

	char ch;
	ch = getch();
	system("cls");

	map[character[Y]][character[X]] = LastObjectIndex;
	switch (ch)
	{
	case LEFT:
		if (map[character[Y]][character[X] - 1] != WALL && map[character[Y]][character[X] - 1] < DOOR)
			character[X]--;
		break;
	case RIGHT:
		if (map[character[Y]][character[X] + 1] != WALL && map[character[Y]][character[X] + 1] < DOOR)
			character[X]++;
		break;
	case UP:
		if (map[character[Y] - 1][character[X]] != WALL && map[character[Y] - 1][character[X]] < DOOR)
			character[Y]--;
		break;
	case DOWN:
		if (map[character[Y] + 1][character[X]] != WALL && map[character[Y] + 1][character[X]] < DOOR)
			character[Y]++;
		break;
	case s:
		Reset();
		break;
	case SPACEBAR:
	{
		int Select = 0;
		printf("=====일시정지=====\n");
		printf("1.계속\n");
		printf("2.종료\n");


		scanf("%d", &Select);
		switch (Select)
		{
		case 1:
			break;
		case 2:
			End = 99;
			break;
		}

	}
	}

	MoveCheck();
	Quiz();
	Finish();
	LastObjectIndex = map[character[Y]][character[X]];
	map[character[Y]][character[X]] = CHARACTER;

}

void main()
{

	int Select;
	while (1)
	{

		system("cls");
		printf("==========================\n");
		printf("=========미궁탈출=========\n");
		printf("==========================\n");
		printf("1.게임시작\n");
		printf("2.종료\n");

		scanf("%d", &Select);
		system("cls");
		switch (Select)
		{
		case 1:
			Init();
			while (1)
			{

				MapDraw();
				Move();

				if (End == 99)
					return;
			}

		case 2:

			return;

		}
		if (Select != 1 || Select != 2)
		{
			system("cls");
			printf("1,2외의 수 입력하지마세요.\n");
			printf("Enter입력시 계속");
			getch();
		}
	}
}